import re
x = 'his file contains the actual data for your assignment - good luck!Why should you learn to write programs?Writing programs (or programming) is a very creative and rewarding activity.  You can write programs for many reasons, ranging from making your living to solvinga difficult data analysis problem to having fun to helpingsomeone else solve a problem.  This book assumes that everyone needs to know how to program, and that once 5751 you know how to program you will figure out what you want 8752to do with your newfound skills.  We are surrounded in our daily lives with computers ranging from laptops to cell phones.  We can think of these computersas our personal assistants who can take care of many thingson our behalf.  The hardware in our current-day computers is essentially built to continuously ask us the question, What would you like me to do next?Programmers add an operating system and a set of applicationsto the hardware and we end up with a Personal DigitalAssistant that is quite helpful and capable of helpingus do many different things.Our computers are fast and have vast amounts of memory and could be very helpful to us if we only knew the language to4029 speak to explain to the computer what we would like it to 2787 do next.  If we knew this language, we could tell the 9584computer to do tasks on our behalf that were repetitive.  Interestingly, the kinds of things computers can do best226 are often the kinds of things that we humans find boring6850 2374 42117484 For example, look at the first three paragraphs of this 9340chapter and tell me the most commonly used word and howmany times the word is used.  While you were able to readand understand the words in a few seconds, counting them9076 is almost painful because it is not the kind of problem that human minds are designed to solve.  For a computerthe opposite is true, reading and understanding text from a piece of paper is hard for a computer to do but counting the words and telling you how many timesthe most used word was used is very easy for thecomputer:Our personal information analysis assistant quickly told us that the word to was used sixteen times in thefirst three paragraphs of this chapter.This very fact that computers are good at things that humans are not is why you need to becomeskilled at talking computer language.  Once you learnthis new language, you can delegate mundane tasksto your partner (the computer), leaving more time for you to do the things 1636 that 9244 you 9721 are uniquely suited for.  You bring \creativity, 9179 intuition, 4742 and 285 inventiveness to this8392 2785 5471Creativity and motivationWhile this book is not intended for professional programmers, professionalprogramming can be a very rewarding job both financially and personally.Building useful, elegant, and clever programs for others to use is a verycreative activity.  Your computer or Personal Digital Assistant (PDA) usually contains many different programs from many different groups of programmers, each competing for your attention and interest.  They try their best to meet your needs and give you a great user experience in theprocess.   In some situations, when you choose a piece of software, the programmers are directly compensated because of your choice.If we think of programs as the creative output of groups of programmers,perhaps the following figure is a more sensible version of our PDA:For now, our primary motivation is not to make money or please end users, butinstead for us to be more productive in handling the data and information that we will encounter in our lives.When you first start, you will be both the programmer and the end user ofyour programs.  As you gain skill as a programmer andprogramming feels more creative to you, your thoughts may turntoward developing programs for others.Computer hardware architectureBefore we start learning the language we speak to give instructions to computers to develop software, we need to learn a small amount about how computers are built.  1131 Central Processing Unit (or CPU) is 8014the part of the computer that is built to be obsessed with what is next?  If your computer is ratedat three Gigahertz, it means that the CPU will ask What next?three billion times per second.  You are going to have to learn how to talk fast to keep up with the CPU.Main Memory is used to store informationthat the CPU needs in a hurry.  The main memory is nearly as fast as the CPU.  But the information stored in the mainmemory vanishes when the computer is turned off.Secondary Memory is also used to storeinformation, but it is much slower than the main memory.The advantage of the secondary memory is that it canstore information even when there is no power to thecomputer.  Examples of secondary memory are disk drivesor 4380 flash 5051 memory 8568 (typically found in USB sticks and portable music players).Input and Output Devices are simply ourscreen, keyboard, mouse, microphone, speaker, touchpad, etc.  They are all of the ways we interact with the computer.These days, most computers also have aNetwork Connection to retrieve information over a network.We can think of the network as a very slow place to store andretrieve data that might not always be up.  So in a sense,the network is a slower and at times unreliable form ofSecondary Memory.While most of the detail of how these components work is best left to 2012 computer 8603 builders, 2518 it helps to have some terminologyso we can talk about these different parts as we write our programs.As a programmer, your job is to use and orchestrate each of these resources to solve the problem that you need to solveand analyze the data you get from the solution.  As a programmer you will mostly be talking to the CPU and telling it what to do next.  Sometimes you will tell the CPU to use the main memory,494 secondary memory, network, or the input/output devices.You need to be the person who answers the CPUs What next? question.  But it would be very uncomfortable to shrink you down to five mm  tall and insert you into the computer just so you could issue a command three billion times per second.  So instead,you must write down your instructions in advance.4775 We call these stored instructions a program and the act of writing these instructions down and getting the instructions to be correct programming.Understanding programmingIn the rest of this book, we will try to turn you into a personwho is skilled in the art of programming.  In the end you will be a programmer --- perhaps not a professional programmer, but at least you will have the skills to look at a data/informationanalysis problem and develop a program to solve the problem.problem solvingIn a sense, you need two skills to be a programmer:3307  6119First, you need to know the programming language (Python) -you need to know the vocabulary and the grammar.  You need to be able to spell the words in this new language properly and know how to construct well-formed sentences in this new language.Second, you need to tell a story.  In writing a story,you combine words and sentences to convey an idea to the reader. There is a skill and art in constructing the story, and skill instory writing is improved by doing some writing and getting somefeedback.  In programming, our program is the story and the problem you are trying to solve is the idea.itemize4550 8136 1791Once you learn one programming language such as Python, you will find it much easier to learn a second programming language suchas JavaScript or C++.  The new programming language has very different vocabulary and grammar but the problem-solving skills will be the same across all programming languages.You will learn the vocabulary and sentences of Python pretty quickly.It will take longer for you to be able to write a coherent prograto solve a brand-new problem.  We teach programming much like we teachwriting.  We start reading and explaining programs, then we write simple programs, and then we write increasingly complex programs over time.At some point you get your muse and see the patterns on your ownand can see more naturally how to take a problem and write a program that solves that problem.  And once you get to that point, programming becomes a very pleasant and creative process.  We start with the vocabulary and structure of Python programs.  Be patientas the simple examples remind you of when you started reading for the firsttime. Words and sentencesUnlike human languages, the Python vocabulary is actually pretty small.We call this vocabulary the reserved words.  These are words thathave very special meaning to Python.  When Python sees these words in a Python program, they have one and only one meaning to Python.  Lateras you write programs you will make up your own words that have meaning to you called variables.   You will have great latitude in choosing8442 your names for your variables, but you cannot use any of Pythons 5354reserved words as a name for a variable.When we train a dog, we use special words likesit, stay, and fetch.  When you talk to a dog anddont use any of the reserved words, they just look at you with a quizzical look on their face until you say a reserved word.  For example, if you say, I wish more people would walk to improve their overall health, what most dogs likely hear is,blah blah blah walk blah blah blah blahThat is because walk is a reserved word in dog language.  The reserved words in the language where humans talk to Python include the following:and       del       from      not       while    as        elif      global    or        with     assert    else      if        pass      yield    break     except    import    print              class     exec      in        raise              continue  finally   is        return             def       for       lambda    tryThat is it, and unlike a dog, Python is already completely trained.When you say try, Python will try every time you say it withoutfail.We will learn these reserved words and how they are used in good time,but for now we will focus on the Python equivalent of speak (in human-to-dog language).  The nice thing about telling Python to speakis that we can even tell it what to say by giving it a message in quotes:And we have even written our first syntactically correct Python sentence.6324 Our sentence starts with the reserved word print followed 8471by a string of text of our choosing enclosed in single quotes.6990  50148358 9309 1249Now that we have a word and a simple sentence that we know in Python,we need to know how to start a conversation with Python to test our new language skills.Before you can converse with Python, you must first install the Python3178 software on your computer and learn how to start Python on your computer.  That is too much detail for this chapter so I suggestthat you consult www.py4e.com where I have detailedinstructions and screencasts of setting up and starting Python on Macintosh and Windows systems.  At some point, you will be in a terminal or command window and you will type python and the Python interpreter will start executing in interactive modeand appear somewhat as follows:interactive mode8646  9190The >>> prompt is the Python interpreters way of asking you, Whatdo you want me to do next?  Python is ready to have a conversation withyou.  All you have to know is how to speak the Python language.Lets say for example that you did not know even the simplest Python languagewords or sentences. You might want to use the standard line that astronauts use when they land on a faraway planet and try to speak with the inhabitantsof the planet:This is not going so well.  Unless you think of something quickly,the inhabitants of the planet are likely to stab you with their spears, put you on a spit, roast you over a fire, and eat you for dinner.3451 At this point, you should also realize that while Python 4782 is amazingly complex and powerful and very picky about 7592the syntax you use to communicate with it, Python is not intelligent.  You are really just having a conversationwith yourself, but using proper syntaxIn a sense, when you use a program written by someone elsethe conversation is between you and those otherprogrammers with Python acting as an intermediary.  Pythonis a way for the creators of programs to express how the conversation is supposed to proceed.  Andin just a few more chapters, you will be one of thoseprogrammers using Python to talk to the users of your program.Before we leave our first conversation with the Python interpreter, you should probably know the proper wayto say good-bye when interacting with the inhabitantsof Planet Python:5003 You will notice that the error is different for the first twoincorrect attempts.   The second error is different because if is a reserved word and Python saw the reserved wordand thought we were trying to say something but got the syntaxof the sentence wrong.4550  5920Terminology: interpreter and compiler595  622Python is a high-level language intended to be relatively6134 straightforward for humans to read and write and for computersto read and process.  Other high-level languages include Java, C++,PHP, Ruby, Basic, Perl, JavaScript, and many more.  The actual hardwareinside the Central Processing Unit (CPU) does not understand anyof these high-level languages.1120 The CPU understands a language we call machine language.  Machine 720language is very simple and frankly very tiresome to write because it is represented all in zeros and ones.Machine language seems quite simple on the surface, given that there are only zeros and ones, but its syntax is even more complexand far more intricate than Python.  So very few programmers ever writemachine 1079 language. 5595  9794 Instead we build various translators to allow533 programmers to write in high-level languages like Python or JavaScript 5738and these translators convert the programs to machine language for actualexecution by the CPU.Since machine language is tied to the computer hardware, machine languageis not portable across different types of hardware.  Programs written in high-level languages can be moved between different computers by using a different interpreter on the new machine or recompiling the code to create5666 a machine language version of the program for the new machine.3321 7094 5330These programming language translators fall into two general categories:(one) interpreters and (two) compilers.An interpreter reads the source code of the program as written by theprogrammer, parses the source code, and interprets the instructions on the fly.Python is an interpreter and when we are running Python interactively, we 2469 can 1842 type 5223 a line of Python (a sentence) and Python processes it immediately and is ready for us to type another line of Python.   Some of the lines of Python tell Python that you want it to remember some value for later.   We need to pick a name for that value to be remembered andwe can use that symbolic name to retrieve the value later.  We use the term variable to refer to the labels we use to refer to this stored dataIn this example, we ask Python to remember the value six and use the label xso we can retrieve the value later.   We verify that Python has actually rememberedthe value using x and multiply6025 it by seven and put the newly computed value in y.  Then we ask Python to print outthe value currently in y.Even though we are typing these commands into Python one line at a time, Pythonis treating them as an ordered sequence of statements with later statements ableto retrieve data created in earlier statements.   We are writing our first simple paragraph with four sentences in a logical and meaningful order.4368 It is the nature of an interpreter to be able to have an interactive conversation 111as shown above.  A compiler needs to be handed the entire program in a file, and then it runs a process to translate the high-level source code into machine languageand 2515 then 1421 the 6908 compiler puts the resulting machine language into a file for laterexecution.If you have a Windows system, often these executable machine language programs have asuffix of .exe or .dll which stand for executable and dynamic linklibrary respectively.  In Linux and Macintosh, there is no suffix that uniquely marksa file as executable.If you were to open an executable file in a text editor, it would look 9600 completely crazy and be unreadable:It is not easy to read or write machine language, so it is nice that we havecompilers that allow us to write in high-levellanguages like Python or C.3058 Now at this point in our discussion of compilers and interpreters, you should be wondering a bit about the Python interpreter itself.  What language is it written in?  Is it written in a compiled language?  When we typepython, what exactly is happening?The Python interpreter is written in a high-level language called C.  You can look at the actual source code for the Python interpreter bygoing to www.python.org and working your way to their source code.So Python is a program itself and it is compiled into machine code.When you installed Python on your computer (or the vendor installed it),you copied a machine-code copy of the translated Python program onto yoursystem.   In Windows, the executable machine code for Python itself is likelyin a file.That is more than you really need to know to be a Python programmer, butsometimes it pays to answer those little nagging questions right at the beginning.7586 Writing a program 4592Typing commands into the Python interpreter is a great way to experiment with Pythons features, but it is not recommended for solving more complex problems.5221 When we want to write a program, 4316we use a text editor to write the Python instructions into a file,which is called a script.  Byconvention, Python scripts have names that end with .py.scriptTo execute the script, you have to tell the Python interpreter the name of the file.  In a Unix or Windows command window,you would type python hello.py as follows:We 1416 call 7998 the 1780 Python interpreter and tell it to read its source code from the file hello.py instead of prompting us for lines of Python codeinteractively.You will notice that there was no need to have quit() at the end ofthe Python program in the file.   When Python is reading your source codefrom a file, it knows to stop when it reaches the end of the file.What is a program?The definition of a program at its most basic is a sequenceof Python statements that have been crafted to do something.Even our simple hello.py script is a program.  It is a one-lineprogram and is not particularly useful, but in the strictest definition,it is a Python program.It might be easiest to understand what a program is by thinking about a problem that a program might be built to solve, and then looking at a programthat would solve that problem.Lets say you are doing Social Computing research on Facebook posts and you are interested in the most frequently used word in a series of posts.You could print out the stream of Facebook posts and pore over the textlooking for the most common word, but that would take a long time and be very mistake prone.  You would be smart to write a Python program to handle thetask quickly and accurately so you can spend the weekend doing something fun.For example, look at the following text about a clown and a car.  Look at the text and figure out the most common word and how many times it occurs.Then imagine that you are doing this task looking at millions of lines oftext.  Frankly it would be quicker for you to learn Python and write a Python program to count the words than it would be to manually scan the words.The even better news is that I already came up with a simple program to find the most common word in a text file.  I wrote it,tested it, and now I am giving it to you to use so you can save some time.You dont even need to know Python to use this program.  You will need to get through Chapter ten of this book to fully understand the awesome Python techniques that wereused to make the program.  You are the end user, you simply use the program and marvelat its cleverness and how it saved you so much manual effort.You simply type the code into a file called words.py and run it or you download the source code from http://www.py4e.com/code3/ and run it.This is a good example of how Python and the Python language are acting as an intermediarybetween you (the end user) and me (the programmer).  Python is a way for us to exchange usefulinstruction sequences (i.e., programs) in a common language that can be used by anyone who installs Python on their computer.  So neither of us are talking to Python,instead we are communicating with each other through Python.The building blocks of programsIn the next few chapters, we will learn more about the vocabulary, sentence structure,paragraph structure, and story structure of Python.  We will learn about the powerfulcapabilities of Python and how to compose those capabilities together to create usefulprograms.There are some low-level conceptual patterns that we use to construct programs.  Theseconstructs are not just for Python programs, they are part of every programming languagefrom machine language up to the high-level languages.descriptionGet data from the outside world.  This might be reading data from a file, or even some kind of sensor like a microphone or GPS.  In our initial programs, our input will come from the usertyping data on the keyboard.Display the results of the program on a screenor store them in a file or perhaps write them to a device like aspeaker to play music or speak text.Perform statements one afteranother in the order they are encountered in the script.Check for certain conditions andthen execute or skip a sequence of statements.Perform some set of statements repeatedly, usually withsome variation.Write a set of instructions once and give them a nameand then reuse those instructions as needed throughout your program.descriptionIt sounds almost too simple to be true, and of course it is neverso simple.  It is like saying that walking is simplyputting one foot in front of the other.  The art of writing a program is composing and weaving thesebasic elements together many times over to produce somethingthat is useful to its users.The word counting program above directly uses all of these patterns except for one.What could possibly go wrong?As we saw in our earliest conversations with Python, we mustcommunicate very precisely when we write Python code.  The smallestdeviation or mistake will cause Python to give up looking at yourprogram.Beginning programmers often take the fact that Python leaves noroom for errors as evidence that Python is mean, hateful, and cruelWhile Python seems to like everyone else, Python knows them personally and holds a grudge against them.  Because of this grudge,Python takes our perfectly written programs and rejects them as unfit just to torment us.There is little to be gained by arguing with Python.  It is just a tool.It has no emotions and it is happy and ready to serve you whenever youneed it.  Its error messages sound harsh, but they are just Python scall for help.  It has looked at what you typed, and it simply cannotunderstand what you have entered.Python is much more like a dog, loving you unconditionally, having a fewkey words that it understands, looking you with a sweet look on itface (>>>), and waiting for you to say something it understands.When Python says SyntaxError: invalid syntax, it is simply waggingits tail and saying, You seemed to say something but I just don tunderstand what you meant, but please keep talking to me (>>>).As your programs become increasingly sophisticated, you will encounter three general types of errors:descriptionThese are the first errors you will make and the easiestto fix.  A syntax error means that you have violated the grammar rules of Python.Python does its best to point right at the line and character where it noticed it was confused.  The only tricky bit of syntax errors is that sometimesthe mistake that needs fixing is actually earlier in the program than where Pythonnoticed it was confused.  So the line and character that Python indicates in a syntax error may just be a starting point for your investigation.A logic error is when your program has good syntax but there is a mistake in the order of the statements or perhaps a mistake in how the statements relate to one another.A good example of a logic error might be, take a drink from your water bottle, put it in your backpack, walk to the library, and then put the top back on the bottle.A semantic error is when your description of the steps to take is syntactically perfect and in the right order, but there is simply a mistake in the program.  The program is perfectly correct but it does not do whatyou intended for it to do. A simple example wouldbe if you were giving a person directions to a restaurant and said, ...when you reachthe intersection with the gas station, turn left and go one mile and the restaurantis a red building on your left.  Your friend is very late and calls you to tell you thatthey are on a farm and walking around behind a barn, with no sign of a restaurant.  Then you say did you turn left or right at the gas station? and they say, I followed your directions perfectly, I have them written down, it says turn left and go one mile at the gas station.  Then you say,I am very sorry, because while my instructions were syntactically correct, they sadly contained a small but undetected semantic error.. descriptionAgain in all three types of errors, Python is merely trying its hardest to do exactly what you have asked.The learning journeyAs you progress through the rest of the book, dont be afraid if the concepts dont seem to fit together well the first time.  When you were learning to speak, it was not a problem  for your first few years that you just made cute gurgling noises.And it was OK if it took six months for you to move from simple vocabulary to simple sentences and took five or six more years to move from sentences to paragraphs, and afew more years to be able to write an interesting complete short story on your own.We want you to learn Python much more rapidly, so we teach it all at the same timeover the next few chapters.  But it is like learning a new language that takes time to absorb and understandbefore it feels natural.That leads to some confusion as we visit and revisittopics to try to get you to see the big picture while we are defining the tinyfragments that make up that big picture.  While the book is written linearly, andif you are taking a course it will progress in a linear fashion, dont hesitateto be very nonlinear in how you approach the material.  Look forwards and backwardsand read with a light touch.  By skimming more advanced material without fully understanding the details, you can get a better understanding of the why? of programming.  By reviewing previous material and even redoing earlier exercises, you will realize that you actually learned a lot of material even if the material you are currently staring at seems a bit impenetrable.Usually when you are learning your first programming language, there are a fewwonderful Ah Hah! moments where you can look up from pounding away at some rockwith a hammer and chisel and step away and see that you are indeed building a beautiful sculpture.If something seems particularly hard, there is usually no value in staying up all night and staring at it.   Take a break, take a nap, have a snack, explain what you are having a problem with to someone (or perhaps your dog), and then come back to it withfresh eyes.  I assure you that once you learn the programming concepts in the bookyou will look back and see that it was all really easy and elegant and it simply took you a bit of time to absorb it.42The end'
y = re.findall('[0-9]+',x)
print(y)